<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope,$window,$location,$timeout,spUtil) {
	var c = this;

	//Orientation sn-record-picker Guide Setup
	$scope.guide = {
		displayValue: c.data.guide.name,
		value: c.data.guide.sys_id,
		name: 'guide'
	};

	$scope.$on("field.change", function(evt, parms) {
		if (parms.field.name == 'guide')
			c.data.setGuide = parms.newValue;

		// Send selected users sys_id to 
		c.server.update().then(function(response) {
			spUtil.update($scope);
		})
	});


	//sn-date-picker client side setup
	$scope.start_date = {
		displayValue: '',
		value: '',
		name: 'start_date'
	};
	$scope.due_date = {
		displayValue: '',
		value: '',
		name: 'due_date'
	};
	
	$scope.dateCheck = function(){
		var today = new Date();
		var dd = today.getDate();
		var mm = today.getMonth()+1; //January is 0!
		var yyyy = today.getFullYear();
		if(dd<10) {
			dd = '0'+dd
		}
		if(mm<10) {
			mm = '0'+mm
		} 
		today = yyyy + '-' + mm + '-' + dd;

		var todayDate = new Date(today);
		var start = new Date($scope.data.start_date);

		if(todayDate > start){
			alert('The Start Date can not be earlier than today.');
			$scope.data.start_date = '';
		}
		
		if($scope.data.start_date == undefined){
			alert('Please select a Start Date first.');
			$scope.data.due_date = '';
		}
	}
	
	//Form submittion
	$scope.onboardUser = function(isValid) {
		c.submitted = true;
		
		if(!isValid)
			return;
		
		$scope.data.action = "onboardUser";
		$scope.server.update().then(function() {
			$scope.data.action = undefined;
		});
		$('#onboardForm')[0].reset();
	}

	$scope.goBack = function() {
		$window.history.back();
	}

}]]></client_script>
        <controller_as>c</controller_as>
        <css>//Global
*{
  font-family:'Lato';
  color: #005687;
}
.container{
  margin-top: 25px;
}

//Form Styling
.form-check-input{
  vertical-align: middle;
  margin: 0px;
}
.btn{
  margin-bottom: 10px;
  color: white !important;
}
.btn-default{
  border: none;
  border-radius: 0px !important;
  padding-bottom: 7px;
  margin: 0px;
  border-bottom: 1px solid #00A99D;
}
.btn-primary, .btn-info{
	box-shadow: 2px 4px 6px #E8E8E8 !important;
}
.btn-lg{
  width: 80% !important;
  border-radius: 10px !important;
}
.btnDiv{
  width:100%;
  margin-bottom:10px;
  text-align:center;
}

input, select{
  border: none;
  border-bottom: 1px solid #00A99D;
  border-radius: 0px !important;
  -webkit-box-shadow: none !important;
}

//Media Queries
@media(min-width:1000px){
	.container {
    width: 60%;
  }
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>onboard_form</id>
        <internal>false</internal>
        <link/>
        <name>Onboard Form</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	// Pull User id using reference field
	var employeeSysId = "";
	if (input && input.setEmployee)
		employeeSysId = input.setEmployee;
	else
		employeeSysId = gs.getUser();

	// Create user record with User id
	var employeeGR = new GlideRecord('sys_user');
	employeeGR.get('sys_id', employeeSysId);
	
	// Populate user object
	data.employee = {};
	$sp.getRecordDisplayValues(data.employee, employeeGR, 'sys_id,user_name,first_name,last_name,email');
	
	
	// Pull User id using reference field
	var guideSysId = "";
	if (input && input.setGuide)
		guideSysId = input.setGuide;
	else
		guideSysId = gs.getUser();

	// Create user record with User id
	var guideGR = new GlideRecord('sys_user');
	guideGR.get('sys_id', guideSysId);

	data.guide = {};
	$sp.getRecordDisplayValues(data.guide, guideGR, 'sys_id,user_name,first_name,last_name,email');


	// Pull User id using reference field
	var executiveSysId = "";
	if (input && input.setExecutive)
		executiveSysId = input.setExecutive;
	else
		executiveSysId = gs.getUser();

	// Create user record with User id
	var executiveGR = new GlideRecord('sys_user');
	executiveGR.get('sys_id', executiveSysId);

	data.executive = {};
	$sp.getRecordDisplayValues(data.executive, executiveGR, 'sys_id,user_name,first_name,last_name,email');


	if(input && input.action == "onboardUser" && validateRecord(input.email)) {
		var newUser = new GlideRecord('sys_user');
		newUser.initialize();
		newUser.first_name = input.first_name.toString();
		newUser.last_name = input.last_name.toString();
		newUser.user_name = input.first_name.toString() + '.' + input.last_name.toString();
		newUser.email = input.email.toString();
		newUser.user_password.setDisplayValue('password');
		var insertedUser = newUser.insert();

		var processRecord = new GlideRecord('x_143728_onboard_process');
		processRecord.initialize();
		processRecord.employee = insertedUser;
		processRecord.orientation_guide = input.guide.toString();
		processRecord.executive = input.executive.toString();
		processRecord.start_date = input.start_date.toString();
		processRecord.position = input.position.toString();
		processRecord.insert();
		gs.addInfoMessage('Onboarding Generated');
	}	

	function validateRecord(email){
		var isNoDuplicate = true;

		//Abort if Email exists		
		if(emailExists(email)){
			gs.addErrorMessage('This email is already registered/onboarding.')
		}

		return isNoDuplicate;
	}

	function emailExists(email){
		var user = new GlideRecord('sys_user');
		user.addQuery('email',email);
		user.query();
		
		return user.hasNext();
	}
	
	data.execusers = [];
	
	var execRole = new GlideRecord('sys_user_has_role');
	execRole.addQuery('role.name','x_143728_onboard.executive_review_user');
	execRole.query();
	while(execRole.next()){
		var record = {};
		record.sys_id = execRole.getDisplayValue('user.sys_id');
		record.name = execRole.getDisplayValue('user.name');
		data.execusers.push(record);
	}

	data.guideusers = [];

	var guideRole = new GlideRecord('sys_user_has_role');
	guideRole.addQuery('role.name','x_143728_onboard.guide');
	guideRole.query();
	while(guideRole.next()){
		var record2 = {};
		record2.sys_id = guideRole.getDisplayValue('user.sys_id');
		record2.name = guideRole.getDisplayValue('user.name');
		data.guideusers.push(record2);
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-03-26 19:54:47</sys_created_on>
        <sys_id>133049964f0513004270e9628110c79e</sys_id>
        <sys_mod_count>308</sys_mod_count>
        <sys_name>Onboard Form</sys_name>
        <sys_package display_value="Onboard" source="x_143728_onboard">07fb0ccd4fc113004270e9628110c71b</sys_package>
        <sys_policy/>
        <sys_scope display_value="Onboard">07fb0ccd4fc113004270e9628110c71b</sys_scope>
        <sys_update_name>sp_widget_133049964f0513004270e9628110c79e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-05-23 20:45:52</sys_updated_on>
        <template><![CDATA[<div class="container">
  <p><strong>Please Enter Employee Information</strong></p>
  <form id='onboardForm' name="onboardForm" novalidate
        ng-submit="onboardUser(onboardForm.$valid)">

    <div class="form-group" 
         ng-class=" { 'has-error' : onboardForm.first_name && c.submitted }">
      <label for="first_name">*First Name:</label>
      <input type="textarea" name="first_name" id="first_name" class="form-control" 
             ng-model="data.first_name"
             ng-required="true">
      <p class='help-block'
         ng-show='onboardForm.first_name.$invalid && c.submitted'>
        Field is required
      </p>
    </div>

    <div class="form-group"
         ng-class=" { 'has-error' : onboardForm.last_name && c.submitted }">
      <label for="last_name">*Last Name:</label>
      <input type="textarea" name="last_name" id="last_name" class="form-control" 
             ng-model="data.last_name"
             ng-required="true">
      <p class='help-block'
         ng-show='onboardForm.last_name.$invalid && c.submitted'>
        Field is required
      </p>
    </div>

    <div class="form-group"
         ng-class=" { 'has-error' : onboardForm.email && c.submitted }">
      <label for="email">*Email:</label>
      <input type="email" name="email" id="email" class="form-control"
             ng-model="data.email"
             ng-required="true">
      <p class='help-block'
         ng-show='onboardForm.email.$invalid && c.submitted'>
        Field is required
      </p>
      <p class="help-block" ng-show="onboardForm.email.$error.email && c.submitted">
        Invalid email format (example@mail.com)
      </p>
    </div>
    
    <div class="form-group"
         ng-class=" { 'has-error' : onboardForm.guide && c.submitted }">
      <label for="executive">*Orientation Guide:</label>
      <select class='dropdown' name='guide' 
              id='guide' class='form-control'
              ng-init="data.guide = ''" 
              ng-model="data.guide"
              ng-required="true"
              ng-options='guideuser.sys_id as guideuser.name for guideuser in data.guideusers'>
      </select>
      <p class='help-block'
         ng-show='onboardForm.guide.$error.required && c.submitted'>
        Field is required
      </p>
    </div>

    <div class="form-group"
         ng-class=" { 'has-error' : onboardForm.executive && c.submitted }">
      <label for="executive">*Executive:</label>
      <select class='dropdown' name='executive' 
              id='executive' class='form-control'
              ng-init="data.executive = ''" 
              ng-model="data.executive"
              ng-required="true"
              ng-options='execuser.sys_id as execuser.name for execuser in data.execusers'>
      </select>
      <p class='help-block'
         ng-show='onboardForm.executive.$error.required && c.submitted'>
        Field is required
      </p>
    </div>

    <div class="form-group"
         ng-class=" { 'has-error' : onboardForm.starts && c.submitted }">
      <label for="start_date">*Start Date:</label>
      <sp-date-picker field = "start_date" name='starts'
                      ng-model="data.start_date" 
                      ng-change='dateCheck()'
                      ng-required="true"
                      sn-change="">
      </sp-date-picker>
      <p class='help-block'
         ng-show='onboardForm.starts.$invalid && c.submitted'>
        Field is required
      </p>
    </div>
    
     <div class="form-group" 
         ng-class=" { 'has-error' : onboardForm.position && c.submitted }">
      <label for="position">*Position:</label>
      <input type="textarea" name="position" id="position" class="form-control" 
             ng-model="data.position"
             ng-required="true">
      <p class='help-block'
         ng-show='onboardForm.position.$invalid && c.submitted'>
        Field is required
      </p>
    </div>

    <p>*REQUIRED</p>

    <div class="col btnDiv">
      <input type="submit" class="btn btn-primary btn-lg" value="Submit">
    </div>

  </form>
  
  <div class="btnDiv">
    <button class="btn btn-info btn-lg " ng-click="goBack()">Back</button>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
